//
//  UpdateValueInteractor.swift
//  Rooted
//
//  Created by Michael Westbrooks on 7/31/20.
//  Copyright (c) 2020 RedRooster Technologies Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UpdateValueBusinessLogic {
  func updateProfile(request: UpdateValue.Something.Request)
}

protocol UpdateValueDataStore { }

class UpdateValueInteractor: UpdateValueBusinessLogic, UpdateValueDataStore {
  var presenter: UpdateValuePresentationLogic?
  var worker: UpdateValueWorker?

  // MARK: Do something
  func updateProfile(request: UpdateValue.Something.Request) {

    guard SessionManager.shared.sessionExists, let currentUser = SessionManager.shared.currentUser, let userId = currentUser.uid, let key = currentUser.key else {
      var error = UpdateValue.HandleError.Response()
      error.errorMessage = "You are not logged in. Please do so and try again."
      error.errorTitle = "Log In"
      self.presenter?.handleError(response: error)
      return
    }

    let path = PathBuilder.build(.Test, in: .Core, with: "eggman")
    let params: [String: Any] = [
      "action": "update_user",
      "key": key,
      "data": [
        "\(request.tag!)": request.value!
      ],
      "uid": userId
    ]
    let apiService = Api()
    apiService.performRequest(path: path,
                              method: .post,
                              parameters: params) { (results, error) in

                                guard error == nil else {
                                  RRLogger.logError(message: "There was an error with the JSON.", owner: self, rError: .generalError)
                                  var error = UpdateValue.HandleError.Response()
                                  error.errorMessage = "Something went wrong. Please try again."
                                  error.errorTitle = "Oops!"
                                  self.presenter?.handleError(response: error)
                                  return
                                }

                                guard let resultsDict = results as? [String: Any] else {
                                  RRLogger.logError(message: "There was an error with the JSON.", owner: self, rError: .generalError)
                                  var error = UpdateValue.HandleError.Response()
                                  error.errorMessage = "Something went wrong. Please try again."
                                  error.errorTitle = "Oops!"
                                  self.presenter?.handleError(response: error)
                                  return
                                }

                                RRLogger.log(message: "Data was returned\n\nResults Dict: \(resultsDict)", owner: self)

                                if let success = resultsDict["success"] as? Bool {
                                  if success {
                                    if let data = resultsDict["data"] as? [String: Any], let userData = UserProfileData(JSON: (data["user"] as? [[String: Any]])?.first ?? [:]) {

                                      var response = UpdateValue.Something.Response()
                                      response.userId = userData.uid ?? ""
                                      response.userData = userData
                                      self.presenter?.onUpdateProfile(response: response)

                                    } else {
                                      var error = UpdateValue.HandleError.Response()
                                      error.errorMessage = "Something went wrong. Please try again."
                                      error.errorTitle = "Oops!"
                                      self.presenter?.handleError(response: error)
                                    }
                                  } else {
                                    var error = UpdateValue.HandleError.Response()
                                    error.errorMessage = resultsDict["error_message"] as? String ?? "Something went wrong. Please try again."
                                    error.errorTitle = "Oops!"
                                    self.presenter?.handleError(response: error)
                                  }
                                }
    }
  }
}
