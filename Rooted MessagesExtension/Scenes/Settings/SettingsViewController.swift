//
//  SettingsViewController.swift
//  Rooted
//
//  Created by Michael Westbrooks on 5/23/20.
//  Copyright (c) 2020 RedRooster Technologies Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import WebKit
import Messages
import EggRating
import Eureka

protocol SettingsDisplayLogic: class {
  func onSuccessfullLogout(viewModel: Settings.LogoutUser.ViewModel)
  func onFailedLogout(viewModel: Settings.LogoutUser.ViewModel)
  func handleError(viewModel: Settings.DisplayError.ViewModel)
}

class SettingsViewController: BaseFormMessagesViewController, SettingsDisplayLogic {

  @IBOutlet private weak var actionsContainerView: UIView!

  var interactor: SettingsBusinessLogic?
  var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?

  // MARK: - Lifecycle methods
  static func setupViewController(meeting: RootedCellViewModel) -> SettingsViewController {
    let storyboard = UIStoryboard(name: kStoryboardMain, bundle: nil)
    let viewController = storyboard.instantiateViewController(withIdentifier: "SettingsViewController") as! SettingsViewController
    return viewController
  }

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = SettingsInteractor()
    let presenter = SettingsPresenter()
    let router = SettingsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: View lifecycle
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    DispatchQueue.main.async {
      self.navigationController?.setNavigationBarHidden(true, animated: animated)
      self.view.bringSubviewToFront(self.actionsContainerView)
    }
  }

  override func viewWillDisappear(_ animated: Bool) {
    super.viewWillDisappear(animated)
    DispatchQueue.main.async {
      self.navigationController?.setNavigationBarHidden(false, animated: animated)
    }
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()

    guard let loggedInUser = SessionManager.shared.currentUser else { return }

    form
    +++ Section("Profile")
      <<< ButtonRow("Edit Profile") {
          $0.title = $0.tag
          $0.presentationMode = .show(controllerProvider: .callback(builder: {
            let sb = UIStoryboard(name: kStoryboardMain, bundle: nil)
            let destinationVC = sb.instantiateViewController(withIdentifier: kEditProfileViewController) as! EditProfileViewController
            return destinationVC
          }), onDismiss: nil)
      }

      +++ Section("App Settings")
//      <<< ButtonRow("Default Calendar") {
//          $0.title = $0.tag
//          $0.presentationMode = .show(controllerProvider: .callback(builder: {
//            let destinationVC = EventKitManager().showCalendarChooser()
//
//            // customization
//            destinationVC.showsDoneButton = true
//            destinationVC.showsCancelButton = true
//
//            // dont forget the delegate
//            destinationVC.delegate = self
//            return destinationVC
//          }), onDismiss: nil)
//      }

      <<< SwitchRow() {
        $0.tag = "locationAccessRow"
        $0.title = "Allow Location Access"
        $0.value = CLLocationManager.authorizationStatus() == .authorizedAlways || CLLocationManager.authorizationStatus() == .authorizedWhenInUse
        $0.onChange { row in
          let okAction = UIAlertAction(title: "OK", style: .cancel, handler: { action in
          })
          HUDFactory.displayAlert(with: "Location Permissions", message: "To update the your location permissions to add a location to meeting, go to your settings app and allow access to your location.", and: [okAction], on: self)
//          if $0.value == true {
//            EventKitManager().getCalendarPermissions { access in
//              (form?.rowBy(tag: "calendarAccessRow") as! SwitchRow).value = access
//            }
//          } else {
//
//          }
//          if let bundleId = Bundle.main.bundleIdentifier {
//            self.openInMessagingURL(urlString: "\(UIApplication.openSettingsURLString)&path=LOCATION_SERVICES/\(bundleId)")
//          }
        }
    }

      <<< SwitchRow() {
              $0.tag = "contactsAccessRow"
              $0.title = "Allow Contacts Access"
              $0.value = ContactKitManager.authStatus
              $0.onChange { row in
                let okAction = UIAlertAction(title: "OK", style: .cancel, handler: { action in
                })
                HUDFactory.displayAlert(with: "Contacts Permissions", message: "To update the your contacts permissions go to your settings app and allow access to your contacts.", and: [okAction], on: self)
      //          if row.value == true {
      //            EventKitManager().getCalendarPermissions { access in
      //              (form?.rowBy(tag: "calendarAccessRow") as! SwitchRow).value = access
      //            }
      //          } else {
      //
      //          }
      //          if let bundleId = Bundle.main.bundleIdentifier {
      //            self.openInMessagingURL(urlString: "\(UIApplication.openSettingsURLString)&path=LOCATION_SERVICES/\(bundleId)")
      //          }
              }
          }
        
        +++ Section("Calendar Settings")
                <<< LabelRow() {
                    $0.title = "Default Calendar"
                  $0.value = EventKitManager.defaultRootedCalendar
                }
                
              <<< SwitchRow() {
                $0.tag = "calendarAccessRow"
                $0.title = "Allow Calendar Access"
                $0.value = EventKitManager.authStatus
                $0.onChange { row in
                  let okAction = UIAlertAction(title: "OK", style: .cancel, handler: { action in
                  })
                  HUDFactory.displayAlert(with: "Calendar Permissions", message: "To update the your calendar permissions go to your settings app and allow access to your calendar.", and: [okAction], on: self)
        //          if row.value == true {
        //            EventKitManager().getCalendarPermissions { access in
        //              (form?.rowBy(tag: "calendarAccessRow") as! SwitchRow).value = access
        //            }
        //          } else {
        //
        //          }
        //          if let bundleId = Bundle.main.bundleIdentifier {
        //            self.openInMessagingURL(urlString: "\(UIApplication.openSettingsURLString)&path=LOCATION_SERVICES/\(bundleId)")
        //          }
                }
            }

    +++ Section("General")
      <<< ButtonRow("About Rooted") {
        $0.title = $0.tag
        $0.presentationMode = .show(controllerProvider: .callback(builder: {
          let sb = UIStoryboard(name: kStoryboardMain, bundle: nil)
          let destinationVC = sb.instantiateViewController(withIdentifier: kInfoViewController) as! InfoViewController
          return destinationVC
        }), onDismiss: nil)
    }

      <<< ButtonRow("Privacy Policy") {
      $0.title = $0.tag
        $0.presentationMode = .show(controllerProvider: .callback(builder: {
        let destinationVC = UIViewController()
        let webView = WKWebView(frame: destinationVC.view.frame)
        let urlRequest = URLRequest(url: URL(string: "https://termsfeed.com/terms-conditions/72b8fed5b38e082d48c9889e4d1276a9")!)
        webView.load(urlRequest)
        destinationVC.view.addSubview(webView)
        return destinationVC 
      }), onDismiss: nil)
    }

      +++ Section()
        <<< ButtonRow("Submit a Review") {
        $0.title = $0.tag
        $0.presentationMode = .none
        }.onCellSelection { [weak self] (cell, row) in
          if let messageAppViewController = self {
            EggRating.promptRateUs(in: messageAppViewController)
          }
        }

      +++ Section(footer: "Rooted was created and is maintained by the folks over at RedRooster Technologies Inc.\n\nVersion: \(Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "")")
      <<< ButtonRow("Logout") {
        $0.title = $0.tag
        $0.presentationMode = .none
      }.cellSetup { (cell, row) in
        cell.tintColor = .systemRed
      }.onCellSelection { [weak self] _, _ in
      // MARK: - Use Case: Show an alert for a user to perform more actions
      let alert = UIAlertController(title: "Logout", message: "You are about to logout. Are you sure?", preferredStyle: .alert)

      // MARK: - Use Case: User wants to logout
      let yesAction = UIAlertAction(title: "Yes", style: .default, handler: { action in
        // Logout
        self?.logout()
      })
      alert.addAction(yesAction)

      // MARK: - Use Case: Delete a meeting from the table view
      let cancelAction = UIAlertAction(title: "No", style: .cancel, handler: { action in
        // Dismiss View
      })
      alert.addAction(cancelAction)

      // Show the alert
      self?.present(alert, animated: true, completion: nil)
    }
  }

  func logout() {
    showHUD()
    let request = Settings.LogoutUser.Request()
    interactor?.logoutUser(request: request)
  }

  func onSuccessfullLogout(viewModel: Settings.LogoutUser.ViewModel) {
    dismissHUD()
    dismiss(animated: true, completion: nil)
  }

  func onFailedLogout(viewModel: Settings.LogoutUser.ViewModel) {
    dismissHUD()
  }

  func handleError(viewModel: Settings.DisplayError.ViewModel) {
    dismissHUD()
    showError(title: viewModel.errorTitle, message: viewModel.errorMessage)
  }

  // MARK: - Use Case: Accept the meeting, save it locally, and add it to your calendar
  @IBAction func back(_ sender: UIButton) {
    dismissView()
  }
}

// Reusable components
extension SettingsViewController {
  // MARK: - Use Case: Show ProgressHUD
  func showHUD() {
    DispatchQueue.main.async {
      self.progressHUD?.show()
    }
  }

  // MARK: - Use Case: Dismiss ProgressHUD
  func dismissHUD() {
    DispatchQueue.main.async {
      self.progressHUD?.dismiss()
    }
  }
}
