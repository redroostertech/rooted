//
//  RegistrationInteractor.swift
//  Rooted
//
//  Created by Michael Westbrooks on 5/18/20.
//  Copyright (c) 2020 RedRooster Technologies Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyRSA
import RNCryptor

protocol RegistrationBusinessLogic {
  func registerViaEmailAndPassword(request: Registration.RegisterViaEmailAndPassword.Request)
  func startUserSession(request: Registration.SetSession.Request)
}

protocol RegistrationDataStore {
  var authenticationLogicDelegate: AuthenticationLogic? { get set }
}

class RegistrationInteractor: RegistrationBusinessLogic, RegistrationDataStore {
  var presenter: RegistrationPresentationLogic?
  var worker: RegistrationWorker?

  var authenticationLogicDelegate: AuthenticationLogic?

  // MARK: - Use Case: When a user provides their email, full name, phone number and a password, try to create an account them in via Firebase
  func registerViaEmailAndPassword(request: Registration.RegisterViaEmailAndPassword.Request) {
    guard let email = request.email, let password = request.password, let fullName = request.fullName, let phoneNumber = request.phoneNumber else {
      var error = Registration.HandleError.Response()
      error.errorMessage = "Please provide account credentials"
      error.errorTitle = "Oops!"
      self.presenter?.handleError(response: error)
      return
    }

    do {
      let keyPair = try SwiftyRSA.generateRSAKeyPair(sizeInBits: 2048)

      // Generate public key to be used for encryption of data to send to someone else
      let publicKey = keyPair.publicKey
      let publicKeyString = try publicKey.base64String()

      // Generate private key to be used for decryption of data for you
      let privateKey = keyPair.privateKey
      let privateKeyString = try privateKey.base64String()

      let privateData = Data(base64Encoded: privateKeyString)!

      let encrypted = RNCryptor.encrypt(data: privateData, withPassword: password)
      let encryptedString = encrypted.base64EncodedString()

      let path = PathBuilder.build(.Test, in: .Auth, with: "leo")
      let params: [String: String] = [
        "action": "email_registration",
        "email": email,
        "password": password,
        "full_name": fullName,
        "phone_number_string": phoneNumber,
        "public_key_string": publicKeyString,
        "private_key_encrypted_string": encryptedString
      ]
      let apiService = Api()
      apiService.performRequest(path: path,
                                method: .post,
                                parameters: params) { (results, error) in

                                  guard error == nil else {
                                    RRLogger.logError(message: "There was an error with the JSON.", owner: self, rError: .generalError)
                                    var error = Registration.HandleError.Response()
                                    error.errorMessage = "Something went wrong. Please try again."
                                    error.errorTitle = "Oops!"
                                    self.presenter?.handleError(response: error)
                                    return
                                  }

                                  guard let resultsDict = results as? [String: Any] else {
                                    RRLogger.logError(message: "There was an error with the JSON.", owner: self, rError: .generalError)
                                    var error = Registration.HandleError.Response()
                                    error.errorMessage = "Something went wrong. Please try again."
                                    error.errorTitle = "Oops!"
                                    self.presenter?.handleError(response: error)
                                    return
                                  }

                                  RRLogger.log(message: "Data was returned\n\nResults Dict: \(resultsDict)", owner: self)

                                  if let success = resultsDict["success"] as? Bool {
                                    if success {
                                      if let data = resultsDict["data"] as? [String: Any] {
                                        var response = Registration.RegisterViaEmailAndPassword.Response()
                                        response.userId = data["uid"] as? String ?? ""
                                        response.userData = UserProfileData(JSON: (data["user"] as? [[String: Any]])?.first ?? [:])
                                        response.publicKey = publicKeyString
                                        response.privateKey = privateKeyString
                                        self.presenter?.onSuccessfulRegistration(response: response)
                                      } else {
                                        var error = Registration.HandleError.Response()
                                        error.errorMessage = "Something went wrong. Please try again."
                                        error.errorTitle = "Oops!"
                                        self.presenter?.handleError(response: error)
                                      }
                                    } else {
                                      var error = Registration.HandleError.Response()
                                      error.errorMessage = resultsDict["error_message"] as? String ?? "Something went wrong. Please try again."
                                      error.errorTitle = "Oops!"
                                      self.presenter?.handleError(response: error)
                                    }
                                  }
      }
    } catch {
      var error = Registration.HandleError.Response()
      error.errorMessage = "Something went wrong. Please try again."
      error.errorTitle = "Oops!"
      self.presenter?.handleError(response: error)
      return
    }
  }

  func startUserSession(request: Registration.SetSession.Request) {
    if let userid = request.userId {
      var response = Registration.SetSession.Response()
      if let user = request.userData {
        SessionManager.start(with: user, publicKey: request.publicKey, privateKey: request.privateKey)
        response.userData = user
      } else {
        SessionManager.start(with: userid, publicKey: request.publicKey, privateKey: request.privateKey)
      }
      response.userId = userid
      self.presenter?.startUserSession(response: response)
    } else {
      var error = Registration.HandleError.Response()
      error.errorMessage = "Something went wrong. Please try again."
      error.errorTitle = "Oops!"
      self.presenter?.handleError(response: error)
    }
  }
}
