//
//  RootedContent.swift
//  Rooted
//
//  Created by Michael Westbrooks on 4/30/20.
//  Copyright (c) 2020 RedRooster Technologies Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

enum RootedContentDB {
  case remote
  case local
}

enum RootedContent {
  // MARK: - Use Case: Initialize session of BranchIO and handle response
  enum SetupBranchIO {
    struct Request { }

    struct Response {
      var meeting: Meeting?
    }

    struct ViewModel {
      var meeting: Meeting?
    }
  }

  // MARK: - Use Case: Check if app has access to calendar permissions
  enum CheckCalendarPermissions {
    struct Request { }

    struct Response {
      var isGranted = false
    }

    struct ViewModel {
      var isGranted = false
    }
  }

  // MARK: - Use Case: Check if app has access to Contacts permissions
  enum CheckContactPermissions {
    struct Request { }

    struct Response {
      var isGranted = false
    }

    struct ViewModel {
      var isGranted = false
    }
  }

  // MARK: - Use Case: As a business, we want to limit access to creating more than (n) meetings based on account type
  enum CheckMaximumMeetingsReached {
    struct Request { }

    struct Response {
      var isMaximumumReached = false
    }

    struct ViewModel {
      var isMaximumumReached = false
      var errorTitle: String = ""
      var errorMessage: String = ""
    }
  }

  // MARK: - Use Case: Retrieve meetings for user
  enum RetrieveMeetings {
    struct Request {
      var userId: String?
      var contentDB: RootedContentDB = .local
      var meetingManagerDelegate: MeetingsManagerDelegate?
      var date: Date?
    }

    struct Response {
      var meetings: [MeetingContextWrapper]?
    }

    struct ViewModel {
      var meetings: [MeetingContextWrapper]?
    }
  }

  // MARK: - Use Case: Retrieve meeting by ID for user
  enum RetrieveMeetingById {
    struct Request {
      var meetingId: String?
      var contentDB: RootedContentDB = .local
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meetings: [MeetingContextWrapper]?
    }

    struct ViewModel {
      var meetings: [MeetingContextWrapper]?
    }
  }

  // MARK: - Use Case: Retrieve meetings for user
  enum RetrieveSentMeetings {
    struct Request {
      var userId: String?
      var contentDB: RootedContentDB = .local
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meetings: [MeetingContextWrapper]?
    }

    struct ViewModel {
      var meetings: [MeetingContextWrapper]?
    }
  }

  // MARK: - Use Case: Go to add an meeting view
  enum CreateNewMeeting {
    struct Request {
      var draftMeeting: MeetingContextWrapper?
    }

    struct Response {
      var draftMeeting: MeetingContextWrapper?
    }

    struct ViewModel {
      var draftMeeting: MeetingContextWrapper?
    }
  }

  // MARK: - Use Case: Go to info view
  enum InfoView {
    struct Request { }

    struct Response { }

    struct ViewModel { }
  }

  // MARK: - Use Case: Go to view calendar view
  enum ViewCalendar {
    struct Request { }

    struct Response { }

    struct ViewModel { }
  }

  // MARK: - Use Case: Add meeting to calendar
  enum AddToCalendar {
    struct Request {
      var meeting: Meeting?
    }

    struct Response {
      var meeting: Meeting?
    }

    struct ViewModel {
      var meeting: Meeting?
    }
  }

  // MARK: - Use Case: Save meeting
  enum SaveMeeting {
    struct Request {
      var meeting: Meeting?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var branchEventID = ""
      var saveType: RootedContentManagerType = .none
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }

    struct ViewModel {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }
  }

  // MARK: - Use Case: Remove meeting to calendar
  enum RemoveFromCalendar {
    struct Request {
      var meeting: Meeting?
    }

    struct Response {
      var meeting: Meeting?
      var errorMessage: String = ""
    }

    struct ViewModel {
      var meeting: Meeting?
      var errorMessage: String = ""
    }
  }

  // MARK: - Use Case: Delete meeting for user
  enum DeleteMeeting {
    struct Request {
      var meeting: RootedCellViewModel?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meeting: RootedCellViewModel?
    }

    struct ViewModel {
      var meeting: RootedCellViewModel?
    }
  }

  // MARK: - Use Case: Cancel meeting for user
  enum CancelMeeting {
    struct Request {
      var meeting: RootedCellViewModel?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meeting: RootedCellViewModel?
    }

    struct ViewModel {
      var meeting: RootedCellViewModel?
    }
  }

  // MARK: - Use Case: Save meeting
  enum EditMeeting {
    struct Request {
      var meeting: Meeting?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var branchEventID = ""
      var saveType: RootedContentManagerType = .none
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }

    struct ViewModel {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }
  }

  // MARK: - Use Case: As a user I want to accpet a meeting I receive
  enum AcceptMeeting {
    struct Request {
      var meeting: Meeting?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var branchEventID = ""
      var saveType: RootedContentManagerType = .none
    }

    struct Response {
      var meeting: Meeting?
    }

    struct ViewModel {
      var meeting: Meeting?
    }
  }

  // MARK: - Use Case: As a user I want to decline a meeting I receive
  enum DeclineMeeting {
    struct Request {
      var meeting: Meeting?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var branchEventID = ""
      var saveType: RootedContentManagerType = .none
    }

    struct Response {
      var meeting: Meeting?
    }

    struct ViewModel {
      var meeting: Meeting?
    }
  }

  // MARK: - Use Case: Refresh session
  enum RefreshSession {
    struct Request { }

    struct Response { }

    struct ViewModel { }
  }
  
  enum DisplayError {
    struct Request { }

    struct Response {
      var errorTitle: String = ""
      var errorMessage: String = ""
      var meeting: Meeting?
    }

    struct ViewModel {
      var errorTitle: String = ""
      var errorMessage: String = ""
      var meeting: Meeting?
    }
  }
}

// MARK: - Drafts
extension RootedContent {
  // MARK: - Use Case: Retrieve drafts meetings for user
  enum RetrieveDraftMeetings {
    struct Request {
      var userId: String?
      var contentDB: RootedContentDB = .local
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meetings: [MeetingContextWrapper]?
    }

    struct ViewModel {
      var meetings: [MeetingContextWrapper]?
    }
  }

  // MARK: - Use Case: Delete draft meeting for user
  enum DeleteDraftMeeting {
    struct Request {
      var meeting: RootedCellViewModel?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var meetingManagerDelegate: MeetingsManagerDelegate?
      var meetingContext: MeetingContextWrapper?
    }

    struct Response { }

    struct ViewModel { }
  }

  // MARK: - Use Case: Save meeting draft
  enum SaveMeetingDraft {
    struct Request {
      var meeting: Meeting?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var branchEventID = ""
      var saveType: RootedContentManagerType = .none
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }

    struct ViewModel {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }
  }

  // MARK: - Use Case: Update draft
  enum UpdateDraft {
    struct Request {
      var meeting: MeetingContextWrapper?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var branchEventID = ""
      var saveType: RootedContentManagerType = .none
      var meetingManagerDelegate: MeetingsManagerDelegate?
    }

    struct Response {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }

    struct ViewModel {
      var meeting: Meeting?
      var contentDB: RootedContentDB = .local
    }
  }
}

// MARK: - Availability
extension RootedContent {
  // MARK: - Use Case: Retrieve availability for user
  enum RetrieveAvailability {
    struct Request {
      var userId: String?
      var contentDB: RootedContentDB = .local
      var availabilityManagerDelegate: AvailabilityManagerDelegate?
    }

    struct Response {

    }

    struct ViewModel {

    }
  }

  // MARK: - Use Case: Create availability for user
  enum SaveAvailability {
    struct Request {
      var availability: Availability?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var branchEventID = ""
      var saveType: RootedContentManagerType = .none
    }

    struct Response {
      var availability: Availability?
    }

    struct ViewModel {
      var availability: Availability?
    }
  }

  // MARK: - Use Case: Delete availability for user
  enum DeleteAvailability {
    struct Request {
      var availability: AvailabilityContextWrapper?
      var userId: String?
      var contentDB: RootedContentDB = .local
      var availabilityManagerDelegate: AvailabilityManagerDelegate?
    }

    struct Response { }

    struct ViewModel { }
  }

}
