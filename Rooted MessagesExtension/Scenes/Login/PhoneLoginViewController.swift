//
//  PhoneLoginViewController.swift
//  Rooted
//
//  Created by Michael Westbrooks on 5/16/20.
//  Copyright (c) 2020 RedRooster Technologies Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthenticationLogic: class {
  func onSucessfulLogin(_ sender: PhoneLoginViewController, uid: String?)
  func handleFailedLogin(_ sender: PhoneLoginViewController, reason: String)
}

protocol PhoneLoginDisplayLogic: class {
  func onSuccessfulEmailAndPasswordLogin(viewModel: PhoneLogin.LoginViaEmailAndPassword.ViewModel)

  func onSuccessfulSessionSet(viewModel: PhoneLogin.SetSession.ViewModel)

  /// Handle any and all scenarios when something goes wrong
  func handleError(viewModel: PhoneLogin.HandleError.ViewModel)
}

class PhoneLoginViewController: BaseAppViewController, PhoneLoginDisplayLogic, UITextFieldDelegate {

  @IBOutlet var emailAddressTextField: UITextField!
  @IBOutlet var passwordTextField: UITextField!
  @IBOutlet var loginButton: UIButton!

  var interactor: PhoneLoginBusinessLogic?
  var router: (NSObjectProtocol & PhoneLoginRoutingLogic & PhoneLoginDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = PhoneLoginInteractor()
    let presenter = PhoneLoginPresenter()
    let router = PhoneLoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    emailAddressTextField.delegate = self
    emailAddressTextField.addLeftPadding(withWidth: 10.0)
    passwordTextField.delegate = self
    passwordTextField.addLeftPadding(withWidth: 10.0)
    loginButton.applyCornerRadius()
  }

  func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
    NavigationCoordinator.performExpandedNavigation(from: self) {
      // Adjust view
    }
    return true
  }

  func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    textField.resignFirstResponder()
    return true
  }

  @IBAction func loginAction(_ sender: UIButton) {
    loginViaEmailAndPassword()
  }

  // MARK: - Use Case: When a user provides their email and a password, try to log them in via Firebase
  func loginViaEmailAndPassword() {
    showHUD()
    var request = PhoneLogin.LoginViaEmailAndPassword.Request()
    request.email = emailAddressTextField.text
    request.password = passwordTextField.text
    interactor?.loginViaEmailAndPassword(request: request)
  }

  func onSuccessfulEmailAndPasswordLogin(viewModel: PhoneLogin.LoginViaEmailAndPassword.ViewModel) {
    dismissHUD()
    startUserSession(with: viewModel.userId)
  }

  func startUserSession(with userId: String?) {
    var request = PhoneLogin.SetSession.Request()
    request.userId = userId
    interactor?.startUserSession(request: request)
  }

  func onSuccessfulSessionSet(viewModel: PhoneLogin.SetSession.ViewModel) {
    let _ = SweetAlert().showAlert(on: self, title: "Thank You!", subTitle: "You are now logged in.", style: .success, buttonTitle: "Proceed", buttonColor: .systemOrange) { success in
      self.dismiss(animated: true, completion: {
        self.router?.dataStore?.authenticationLogicDelegate?.onSucessfulLogin(self, uid: viewModel.userId)
      })
    }
  }

  func handleError(viewModel: PhoneLogin.HandleError.ViewModel) {
    dismissHUD()
    let _ = SweetAlert().showAlert(on: self, title: viewModel.errorTitle ?? "Oops", subTitle: viewModel.errorMessage ?? "Something went wrong. Please try again.", style: .error, buttonTitle: "OK", buttonColor: .systemOrange)
  }
}

// Reusable components
extension PhoneLoginViewController {
  // MARK: - Use Case: Show ProgressHUD
  func showHUD() {
    DispatchQueue.main.async {
      self.progressHUD?.show()
    }
  }

  // MARK: - Use Case: Dismiss ProgressHUD
  func dismissHUD() {
    DispatchQueue.main.async {
      self.progressHUD?.dismiss()
    }
  }
}
